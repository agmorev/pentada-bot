from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
from states.getfile import Getfile, GetEdrFile
from states.notes import Telesend, Usersend
from states.signin import Signin
from keyboards.inline.cabinet_markup import (
    login_markup,
    client_cabinet_markup, order_markup, client_report_markup,
    admin_cabinet_markup, admin_report_markup, admin_notifications_markup
)
import datetime
from aiogram.types import ContentType
import sqlite3
import firebirdsql
from sshtunnel import SSHTunnelForwarder
import pandas as pd
from io import BytesIO
import requests
import math
import re
import time
import json


user_email=''
user_password=''
user_company=''
user_fullname=''

admins = [
        1061732281, #–ê–ª–µ–∫—Å–µ–π –ú–æ—Ä–µ–≤
        # 541114745, #–í–ª–∞–¥–∏–º–∏—Ä –ü–µ—Ç—Ä–æ–≤
        # 119717130, #–ò–≥–æ—Ä—å –ü–∏–∫–æ–≤—Å–∫–∏–π
        # 1902720524, #–Æ—Ä–∏–π –ö—É—Ü
        # 910530618, #–ê–Ω–¥—Ä–µ–π –ö—É–∑–Ω–µ—Ü–æ–≤
        # -1001206691663, #24/7 –≥—Ä—É–ø–∞
    ]
clients = [
        514845824, #–ú–æ–π–î–æ–º–∞—à–Ω–∏–π-–≠–∫–æ–≤–∏—Å
    ]


###################################################### –ö–ê–ë–Ü–ù–ï–¢ ##################################################

@dp.message_handler(text="üíº –ö–∞–±—ñ–Ω–µ—Ç")
async def bot_info(message: types.Message):
    await message.answer('‚ö†Ô∏è –û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤. –î–æ—Å—Ç—É–ø –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –≥–∞—Ä–∞–Ω—Ç–æ–º –ø—ñ—Å–ª—è —É–∫–ª–∞–¥–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É.', reply_markup=login_markup)


###################################################### LOGIN ##################################################

@dp.callback_query_handler(text_contains="login")
async def cabinet_login(call: types.CallbackQuery):
    await call.answer(cache_time=60)

    userid = call.message.chat.id
    print(userid)

    #SHOW ADMIN INTERFACE
    if userid in admins:
        await call.message.answer('<b>–ö–ê–ë–Ü–ù–ï–¢ –ö–ï–†–Ü–í–ù–ò–ö–ê</b>')
        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é", reply_markup=admin_cabinet_markup)
    elif userid in clients:
        await call.message.answer('<b>–û–°–û–ë–ò–°–¢–ò–ô –ö–ê–ë–Ü–ù–ï–¢</b>')
        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é", reply_markup=client_cabinet_markup)
    else:
        await call.message.answer('‚õîÔ∏è–£ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É *–≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ*.\n–ù–∞–ø—Ä–∞–≤—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\nüìß office@pentada-trans.com', parse_mode="Markdown")


###################################################### SIGNIN ##################################################

@dp.callback_query_handler(text_contains="signin")
async def cabinet_signin(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Signin.company_state.set()
    await call.message.answer('üì§ <b>–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ –ª–∏—à–µ –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.')
    await call.message.answer("1Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ –∫–æ–¥ –Ñ–î–† –∫–æ–º–ø–∞–Ω—ñ—ó:")

@dp.message_handler(state=Signin.company_state)
async def company_input(message: types.Message, state: FSMContext):
    company = message.text
    await state.update_data(answer1=company)
    await message.answer("2Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await Signin.next()

@dp.message_handler(state=Signin.name_state)
async def name_input(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(answer2=name)
    await message.answer("3Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await Signin.next()

@dp.message_handler(state=Signin.email_state)
async def email_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    company = data.get("answer1")
    name = data.get("answer2")
    email = message.text
    userid = message.from_user.id
    fullname = message.from_user.full_name
    await state.finish()
    await message.answer("‚ÄºÔ∏è –ó–∞—è–≤–∫—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–æ–±–∫—É. –ü—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –í–∞—Å –±—É–¥–µ –ø–æ—ñ–Ω—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ.")
    await bot.send_message("1061732281", f"‚ÄºÔ∏è –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –∫–ª—ñ—î–Ω—Ç–∞:\n–∫–æ–º–ø–∞–Ω—ñ—è: {company}\n–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {name}\nemail: {email}\nid: {userid}\n–Ω–∞–∑–≤–∞: {fullname}")


##########################################################################–ó–ê–Ø–í–ö–ò#################################################################

@dp.callback_query_handler(text_contains="orders")
async def cabinet_orders(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìë <b>–ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–¥–∞—á—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥–∞—Ä–∞–Ω—Ç—ñ—ó.', reply_markup=order_markup)

@dp.callback_query_handler(text_contains="order_download")
async def cabinet_order_download(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üì§ <b>–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–ó–∞—è–≤–∫—É –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª—ñ order.xlsx. –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ü–∏–º –±–ª–∞–Ω–∫–æ–º –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ—Ç–æ–≤—É –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –ö–∞–±—ñ–Ω–µ—Ç—É.')
    await bot.send_document(chat_id=call.message.chat.id, document="BQACAgIAAxkBAAIhxF_5xaVZIcmAKdtbNI1mQebl0coIAAIgCwACb5fQS5KVIbblRc5PHgQ")

@dp.callback_query_handler(text_contains="order_send")
async def cabinet_order_send(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Getfile.load_state.set()
    await call.message.answer('üì§ <b>–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–Ø–í–ö–ò</b>')
    await call.message.answer('–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ doc, docx, xls, xlsx –∞–±–æ –º–∏—Ç–Ω–æ—ó –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ç—ñ imfx. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é Telegram.')

@dp.message_handler(state=Getfile.load_state, content_types=ContentType.DOCUMENT)
async def load_file(message: types.Message, state: FSMContext):
    await message.document.download()
    order_fileid = message.document.file_id
    order_filename = message.document.file_name
    ext = ('doc', 'docx', 'xls', 'xlsx', 'imfx')
    if order_filename.endswith(ext):
        await state.update_data(answer=order_fileid)
        # await bot.send_message("-400711737", f"‚ÄºÔ∏è –ù–æ–≤–∞ –ó–ê–Ø–í–ö–ê –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_fullname} ({user_email}) –∫–æ–º–ø–∞–Ω—ñ—ó {user_company}")
        # await message.forward("-400711737")
        await bot.send_message("-1001206691663", f"‚ÄºÔ∏è –ù–æ–≤–∞ –ó–ê–Ø–í–ö–ê –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_fullname} ({user_email}) –∫–æ–º–ø–∞–Ω—ñ—ó {user_company}")
        await message.forward("-1001206691663")
        await message.reply(f"–ó–∞—è–≤–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ {order_filename} —Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        await state.finish()
    else:
        await message.reply('‚ùóÔ∏è–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –í–∞–º–∏ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É doc, docx, xls, xlsx, imfx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É...')

@dp.message_handler(state=Getfile.load_state, content_types=ContentType.ANY)
async def load_file_reply(message: types.Message, state: FSMContext):
    await message.reply('‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–µ –í–∞–º–∏ –Ω–µ —î —Ñ–∞–π–ª–æ–º —Ç–∞/–∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É doc, docx, imfx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...')


###########################################################################–ó–í–Ü–¢–ò###################################################################

@dp.callback_query_handler(text_contains="reports")
async def cabinet_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìä <b>–ó–í–Ü–¢–ò</b>')

    # GET USER INFO
    userid = call.message.chat.id

    if userid in admins:
        await call.message.answer('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ –≤–∏–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É –≥–∞—Ä–∞–Ω—Ç—ñ—ó –≤–ø—Ä–æ–¥–æ–≤–∂ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É', reply_markup=admin_report_markup)
    else:
        await call.message.answer('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ –≤–∏–¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—É –≥–∞—Ä–∞–Ω—Ç—ñ—ó –≤–ø—Ä–æ–¥–æ–≤–∂ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É', reply_markup=client_report_markup)

@dp.callback_query_handler(text=["admin_report_2021", "admin_report_2022"])
async def year_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    if call.data == "admin_report_2021":
        await call.message.answer('üìä <b>–†–Ü–ß–ù–ò–ô –ó–í–Ü–¢ 2021</b>')
        year = "2021"
    elif call.data == "admin_report_2022":
        await call.message.answer('üìä <b>–†–Ü–ß–ù–ò–ô –ó–í–Ü–¢ 2022</b>')
        year = "2022"

    # GET USER INFO
    userid = call.message.chat.id
    fullname = call.message.chat.full_name
    date = datetime.datetime.now()

    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        #conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
        cursor = conn.cursor()
        print('-----------------CABINET-------------------')
        print("Cabinet successfully connected to SQLite by | ", fullname,' | ', date)
        cursor.execute('SELECT * FROM users WHERE user_id={};'.format(str(userid)))
        found = cursor.fetchone()
        if found:
            global user_email, user_fullname, user_com, user_com_code
            user_email = found[1]
            user_fullname = found[3]+' '+found[4]
            user_com = found[5]
            user_com_code = found[6]
        cursor.close()

    except sqlite3.Error as error:
        print("Failed to work with sqlite table users", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'01.01.{} 00:00' AND GL_DATE_CR<'31.12.{} 23:59' AND GL_PR!=2;
                        '''.format(year, year), conn)
    else:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'01.01.{} 00:00' AND GL_DATE_CR<'31.12.{} 23:59' AND GL_CL_OKPO LIKE '%{}' AND GL_PR!=2;
                        '''.format(year, year, user_com_code), conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())
    df['COUNT'] = 1
    final_table = df.groupby('GL_CL_NAME').agg({'COUNT': 'count', 'GL_SUMMA': 'sum'}).reset_index(drop=False)
    print(final_table)
    year_table = final_table.rename(columns={'GL_CL_NAME': '–ö–ª—ñ—î–Ω—Ç', 'COUNT': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'GL_SUMMA': '–°—É–º–∞'})
    table1 = year_table.sort_values(by=['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], sparsify=False, index=False, max_colwidth=15, col_space=10, formatters={"–°—É–º–∞": "{:,.2f}".format})
    table2 = year_table.sort_values(by=['–°—É–º–∞'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–°—É–º–∞'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})

    await call.message.answer('üìä–í {} —Ä–æ—Ü—ñ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(year, total_number, total_sum), parse_mode='Markdown')
    if userid in admins:
        await call.message.answer('üîù*–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é:*\n{}'.format(table1), parse_mode='Markdown')
        await call.message.answer('üîù*–ó–∞ —Å—É–º–æ—é:*\n{}'.format(table2), parse_mode='Markdown')

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

    conn.close()
    server.stop()

@dp.callback_query_handler(text_contains=["admin_report_month"])
async def month_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìä <b>–ü–û–¢–û–ß–ù–ò–ô –ú–Ü–°–Ø–¶–¨</b>')

    # GET USER INFO
    userid = call.message.chat.id
    fullname = call.message.chat.full_name
    date = datetime.datetime.now()

    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        #conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
        cursor = conn.cursor()
        print('-----------------CABINET-------------------')
        print("Cabinet successfully connected to SQLite by | ", fullname,' | ', date)
        cursor.execute('SELECT * FROM users WHERE user_id={};'.format(str(userid)))
        found = cursor.fetchone()
        if found:
            global user_email, user_fullname, user_com, user_com_code
            user_email = found[1]
            user_fullname = found[3]+' '+found[4]
            user_com = found[5]
            user_com_code = found[6]
        cursor.close()

    except sqlite3.Error as error:
        print("Failed to work with sqlite table users", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    yesterday = datetime.date.today() - datetime.timedelta(days=1)
    today = datetime.date.today()
    if today.day == 1:
        month = today.month
        year = today.year
    else:
        month = yesterday.month
        year = yesterday.year

    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'01.{}.{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_PR!=2;
                        '''.format(month, year, today), conn)
    else:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'01.{}.{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_CL_OKPO LIKE '%{}' AND GL_PR!=2;
                        '''.format(month, year, today, user_com_code), conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())
    df['COUNT'] = 1
    final_table = df.groupby('GL_CL_NAME').agg({'COUNT': 'count', 'GL_SUMMA': 'sum'}).reset_index(drop=False)
    month_table = final_table.rename(columns={'GL_CL_NAME': '–ö–ª—ñ—î–Ω—Ç', 'COUNT': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'GL_SUMMA': '–°—É–º–∞'})
    table1 = month_table.sort_values(by=['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], sparsify=False, index=False, max_colwidth=15, col_space=10, formatters={"–°—É–º–∞": "{:,.2f}".format})
    table2 = month_table.sort_values(by=['–°—É–º–∞'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–°—É–º–∞'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})

    await call.message.answer('üìä–ó –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(total_number, total_sum), parse_mode='Markdown')
    if userid in admins:
        await call.message.answer('üîù*–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é:*\n{}'.format(table1), parse_mode='Markdown')
        await call.message.answer('üîù*–ó–∞ —Å—É–º–æ—é:*\n{}'.format(table2), parse_mode='Markdown')

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

    conn.close()
    server.stop()

@dp.callback_query_handler(text_contains=["admin_report_yesterday"])
async def yesterday_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìä <b>–ú–ò–ù–£–õ–ê –î–û–ë–ê</b>')

    # GET USER INFO
    userid = call.message.chat.id
    fullname = call.message.chat.full_name
    date = datetime.datetime.now()

    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        #conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
        cursor = conn.cursor()
        print('-----------------CABINET-------------------')
        print("Cabinet successfully connected to SQLite by | ", fullname,' | ', date)
        cursor.execute('SELECT * FROM users WHERE user_id={};'.format(str(userid)))
        found = cursor.fetchone()
        if found:
            global user_email, user_fullname, user_com, user_com_code
            user_email = found[1]
            user_fullname = found[3]+' '+found[4]
            user_com = found[5]
            user_com_code = found[6]
        cursor.close()

    except sqlite3.Error as error:
        print("Failed to work with sqlite table users", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    yesterday = datetime.date.today() - datetime.timedelta(days=1)

    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_PR!=2;
                        '''.format(yesterday, yesterday), conn)
    else:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_CL_OKPO LIKE '%{}' AND GL_PR!=2;
                        '''.format(yesterday, yesterday, user_com_code), conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())
    df['COUNT'] = 1
    final_table = df.groupby('GL_CL_NAME').agg({'COUNT': 'count', 'GL_SUMMA': 'sum'}).reset_index(drop=False)
    yesterday_table = final_table.rename(columns={'GL_CL_NAME': '–ö–ª—ñ—î–Ω—Ç', 'COUNT': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'GL_SUMMA': '–°—É–º–∞'})
    table1 = yesterday_table.sort_values(by=['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})
    table2 = yesterday_table.sort_values(by=['–°—É–º–∞'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–°—É–º–∞'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})

    await call.message.answer('üìä–ó–∞ –º–∏–Ω—É–ª—É –¥–æ–±—É *{}* –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(yesterday.strftime("%d.%m.%Y"), total_number, total_sum), parse_mode='Markdown')
    if userid in admins:
        await call.message.answer('üîù*–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é:*\n{}'.format(table1), parse_mode='Markdown')
        await call.message.answer('üîù*–ó–∞ —Å—É–º–æ—é:*\n{}'.format(table2), parse_mode='Markdown')

    conn.close()
    server.stop()

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

@dp.callback_query_handler(text_contains=["admin_report_today"])
async def today_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üìä <b>–ü–û–¢–û–ß–ù–ê –î–û–ë–ê</b>')

    # GET USER INFO
    userid = call.message.chat.id
    fullname = call.message.chat.full_name
    date = datetime.datetime.now()

    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        #conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
        cursor = conn.cursor()
        print('-----------------CABINET-------------------')
        print("Cabinet successfully connected to SQLite by | ", fullname,' | ', date)
        cursor.execute('SELECT * FROM users WHERE user_id={};'.format(str(userid)))
        found = cursor.fetchone()
        if found:
            global user_email, user_fullname, user_com, user_com_code
            user_email = found[1]
            user_fullname = found[3]+' '+found[4]
            user_com = found[5]
            user_com_code = found[6]
        cursor.close()

    except sqlite3.Error as error:
        print("Failed to work with sqlite table users", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    today = datetime.date.today()

    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_PR!=2;
                        '''.format(today, today), conn)
    else:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_DATE_CR>'{} 00:00' AND GL_DATE_CR<'{} 23:59' AND GL_CL_OKPO LIKE '%{}' AND GL_PR!=2;
                        '''.format(today, today, user_com_code), conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())
    df['COUNT'] = 1
    final_table = df.groupby('GL_CL_NAME').agg({'COUNT': 'count', 'GL_SUMMA': 'sum'}).reset_index(drop=False)
    today_table = final_table.rename(columns={'GL_CL_NAME': '–ö–ª—ñ—î–Ω—Ç', 'COUNT': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'GL_SUMMA': '–°—É–º–∞'})
    table1 = today_table.sort_values(by=['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})
    table2 = today_table.sort_values(by=['–°—É–º–∞'], ascending=False).to_string(header=False, columns=['–ö–ª—ñ—î–Ω—Ç', '–°—É–º–∞'], sparsify=False, index=False, max_colwidth=15, col_space=10, justify='left', formatters={"–°—É–º–∞": "{:,.2f}".format})

    await call.message.answer('üìä–ó–∞ –ø–æ—Ç–æ—á–Ω—É –¥–æ–±—É *{}* –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(today.strftime("%d.%m.%Y"), total_number, total_sum), parse_mode='Markdown')
    if userid in admins:
        await call.message.answer('üîù*–ó–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é:*\n{}'.format(table1), parse_mode='Markdown')
        await call.message.answer('üîù*–ó–∞ —Å—É–º–æ—é:*\n{}'.format(table2), parse_mode='Markdown')

    conn.close()
    server.stop()

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

@dp.callback_query_handler(text_contains=["report_simissued"])
async def simissued_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('‚õîÔ∏è <b>–û–î–ù–û–ß–ê–°–ù–û –í–ò–î–ê–ù–Ü –ì–ê–†–ê–ù–¢–Ü–á</b>')

    # GET USER INFO
    userid = call.message.chat.id

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_PR=1 OR GL_PR=3;
                        ''', conn)
    else:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE GL_PR=1 OR GL_PR=3;
                        ''', conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())

    await call.message.answer('‚ö†Ô∏è–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å –æ–¥–Ω–æ—á–∞—Å–Ω–æ –≤–∏–¥–∞–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(total_number, total_sum), parse_mode='Markdown')

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

    conn.close()
    server.stop()

@dp.callback_query_handler(text_contains=["report_expiration"])
async def expiration_reports(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('‚åõÔ∏è <b>–ó–ê–í–ï–†–®–ï–ù–ù–Ø –¢–ï–†–ú–Ü–ù–£ –î–Ü–á</b>')

    # GET USER INFO
    userid = call.message.chat.id

    # GET DATA FROM DATABASE
    server = SSHTunnelForwarder(
                ('mail.pentada-brok.com', 57300),
                ssh_username="agmorev",
                ssh_password="Jur48dl¬ßhfi!83",
                remote_bind_address=('192.168.70.99', 3051),
                local_bind_address=('127.0.0.1', 53051)
            )
    server.start()
    print(server)
    conn = firebirdsql.connect(
            host='127.0.0.1',
            database='C:\MasterD\MDGarant\PentadaDB\Db\MDGARANT.FDB',
            port=53051,
            user='SYSDBA',
            password='masterkey',
            charset='UTF8'
    )

    exp_date = (datetime.datetime.today() + datetime.timedelta(days=3)).strftime("%Y-%m-%d")
    if userid in admins:
        df = pd.read_sql('''
                        SELECT
                            GL_NUM,
                            GL_DATE_CR,
                            GL_CL_NAME,
                            GL_CL_OKPO,
                            GL_CAR_NAME,
                            GL_CAR_ADR,
                            GL_CCD_07_01,
                            GL_CCD_07_02,
                            GL_CCD_07_03,
                            GL_CCD_DATE,
                            GG_33_01,
                            GG_31_01,
                            GG_35_01,
                            GL_SUMMA,
                            GL_PR,
                            GL_DATE_EXP
                        FROM GARANT_LIST
                        INNER JOIN GARANT_LIST_GOODS
                        ON GARANT_LIST.IDENT=GARANT_LIST_GOODS.IDENT
                        WHERE (GL_PR=1 OR GL_PR=3) AND (GL_DATE_EXP<='{}');
                        '''.format(exp_date), conn)

    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    df.fillna("-", inplace=True)
    df['GL_DATE_CR'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_CCD_DATE'].replace({'30.12.1899 00:00': ''}, inplace=True)
    df['GL_DATE_EXP'].replace({'30.12.1899 00:00': ''}, inplace=True)

    df = df.groupby('GL_NUM').agg({
        'GL_DATE_CR': 'first',
        'GL_CL_NAME': 'first',
        'GL_CL_OKPO': 'first',
        'GL_CAR_NAME': 'first',
        'GL_CAR_ADR': 'first',
        'GL_CCD_07_01': 'first',
        'GL_CCD_07_02': 'first',
        'GL_CCD_07_03': 'first',
        'GL_CCD_DATE': 'first',
        'GG_33_01': ', '.join,
        'GG_31_01': '; '.join,
        'GG_35_01': sum,
        'GL_SUMMA': 'first',
        'GL_PR': 'first',
        'GL_DATE_EXP': 'first'
    })

    total_number = df.shape[0]
    total_sum = "{:,.2f}".format(df['GL_SUMMA'].sum())

    await call.message.answer('‚ÄºÔ∏è –ù–∞ –¥–∞–Ω–∏–π —á–∞—Å —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –∑–∞ 3 –¥–Ω—ñ –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π:\n-–∫—ñ–ª—å–∫—ñ—Å—Ç—å - *{}* –ì–î\n-—Å—É–º–∞ - *{}* –≥—Ä–Ω.'.format(total_number, total_sum), parse_mode='Markdown')

    #FORM XLSX TABLE AND SEND TO USER
    in_memory = BytesIO()
    in_memory.name = '{}.xlsx'.format(call.data)
    df.to_excel(in_memory)
    in_memory.seek(0,0)
    await call.message.answer_document(in_memory)

    conn.close()
    server.stop()


############################################################### –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ó –Ñ–î–†##################################################################3

@dp.callback_query_handler(text_contains="edr_info")
async def cabinet_edr_info(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await GetEdrFile.load_state.set()
    await call.message.answer('üóÇ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ó –Ñ–î–†</b>')
    await call.message.answer('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –Ñ–¥–∏–Ω–æ–≥–æ –¥–µ—Ä–∂–∞–≤–Ω–æ–≥–æ —Ä–µ—î—Å—Ç—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ –∫–æ–¥—ñ–≤ –∑ —Ñ–∞–π–ª—É —É —Ñ–æ—Ä–º–∞—Ç—ñ xlsx. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é Telegram.')

@dp.message_handler(state=GetEdrFile.load_state, content_types=ContentType.DOCUMENT)
async def load_edr_file(message: types.Message, state: FSMContext):

    #INFO ABOUT USER
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    await message.document.download()
    edr_fileid = message.document.file_id
    edr_filename = message.document.file_name
    edr_filepath = await bot.get_file(edr_fileid)
    ext = ('xlsx')
    if edr_filename.endswith(ext):
        await state.update_data(answer=edr_fileid)
        await message.reply(f"–ü–µ—Ä–µ–ª—ñ–∫ –∫–æ–¥—ñ–≤ –Ñ–î–† –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ {edr_filename}. –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...")
        await bot.send_message("1061732281", f"‚ÄºÔ∏è –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –Ñ–î–† –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {first_name} {last_name} {username} ({user_id})")
        await state.finish()
        doc = open('/home/agmorev/pentadabot_v2/data/waiting.mp4', 'rb')
        msg = await message.answer_animation(doc, caption='–ó–∞—á–µ–∫–∞–π—Ç–µ...')

        # –Ñ–î–† –ü–ê–†–°–ï–† –ë–õ–û–ö
        df = pd.read_excel(edr_filepath.file_path, sheet_name=0)
        df.insert(1, '–ù–∞–∑–≤–∞', '', True)
        df.insert(2, '–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', '', True)
        df.insert(3, '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', '', True)
        df.insert(4, '–°—Ç–∞—Ç—É—Ç–Ω–∏–π —Ñ–æ–Ω–¥', '', True)
        df.insert(5, '–î—ñ—è–ª—å–Ω—ñ—Å—Ç—å', '', True)
        df.insert(6, '–ö–µ—Ä—ñ–≤–Ω–∏–∫', '', True)
        df.insert(7, '–ü–æ—à—Ç–∞', '', True)
        df.insert(8, '–¢–µ–ª–µ—Ñ–æ–Ω', '', True)
        df.insert(9, '–°—Ç–∞—Ç—É—Å', '', True)
        print(df)

        # OUTPUT TABLE CREATING
        email_pattern = r'\S+@\S+\.\S+'
        phone_pattern = r'\+\d{12}'
        for index, row in df.iterrows():
            # Exclude foreign companies
            if math.isnan(row["–ö–æ–¥"]):
                time.sleep(1)
                continue
            if len(str(int(row["–ö–æ–¥"]))) < 8:
                c_code = str(int(row["–ö–æ–¥"])).zfill(8)
            else:
                c_code = str(int(row["–ö–æ–¥"]))
            response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}'.format(c_code))
            data = json.loads(response.text)
            try:
                try:
                    c_id = data['data']['uos'][0]['uo_id']
                except:
                    time.sleep(1)
                    continue
                response2 = requests.get('https://e-data.com.ua/api/v1/uo/data/{}'.format(c_id))
                data2 = json.loads(response2.text)
                try:
                    c_name = data2['data']['name']
                except:
                    c_name = ""
                try:
                    c_regdate = data2['data']['reg_date']
                except:
                    c_regdate = ""
                try:
                    c_capital = data2['data']['authorized_capital']
                except:
                    c_capital = ""
                try:
                    c_signer = data2['data']['singers'][0]
                except:
                    c_signer = ""
                try:
                    c_activity = data2['data']['activity_kinds'][0]['name']
                except:
                    c_activity = ""
                if data2['data']['contacts']:
                    c_contacts = data2['data']['contacts']
                    try:
                        c_phones = "; ".join(re.findall(phone_pattern, c_contacts))
                    except:
                        c_phones = ""
                    try:
                        c_email = "; ".join(re.findall(email_pattern, c_contacts, re.IGNORECASE))
                    except:
                        c_email = ""
                else:
                    c_email = ""
                    c_phones = ""
                try:
                    c_status = data2['data']['state_name']
                except:
                    c_status = ""
                try:
                    c_address = data2['data']['address']
                except:
                    c_address = ""
                time.sleep(1)
            except:
                try:
                    c_name = data['data']['uos'][0]['uo_name']
                except:
                    c_name = ""
                try:
                    c_regdate = data['data']['uos'][0]['uo_reg_date']
                except:
                    c_regdate = ""
                try:
                    c_capital = data['data']['uos'][0]['uo_authorized_capital']
                except:
                    c_capital = ""
                if data['data']['uos'][0]['uo_contacts']:
                    c_contacts = data['data']['uos'][0]['uo_contacts']
                    try:
                        c_phones = "; ".join(re.findall(phone_pattern, c_contacts))
                    except:
                        c_phones = ""
                    try:
                        c_email = "; ".join(re.findall(email_pattern, c_contacts, re.IGNORECASE))
                    except:
                        c_email = ""
                else:
                    c_email = ""
                    c_phones = ""
                try:
                    c_status = data['data']['uos'][0]['state_name']
                except:
                    c_status = ""
                try:
                    c_address = data['data']['uos'][0]['uo_address']
                except:
                    c_address = ""
                c_activity = ""
                c_signer = ""
                time.sleep(1)

            df.at[index,'–ù–∞–∑–≤–∞'] = c_name
            df.at[index,'–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'] = c_address
            df.at[index,'–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'] = c_regdate
            df.at[index,'–°—Ç–∞—Ç—É—Ç–Ω–∏–π —Ñ–æ–Ω–¥'] = c_capital
            df.at[index,'–î—ñ—è–ª—å–Ω—ñ—Å—Ç—å'] = c_activity
            df.at[index,'–ö–µ—Ä—ñ–≤–Ω–∏–∫'] = c_signer
            df.at[index,'–ü–æ—à—Ç–∞'] = c_email
            df.at[index,'–¢–µ–ª–µ—Ñ–æ–Ω'] = c_phones
            df.at[index,'–°—Ç–∞—Ç—É—Å'] = c_status

            time.sleep(1)

        await msg.delete()

        #FORM XLSX TABLE AND SEND TO USER
        today = datetime.datetime.today().strftime("%d-%m-%Y")
        in_memory = BytesIO()
        in_memory.name = 'edrpou{}.xlsx'.format(today)
        df.to_excel(in_memory)
        in_memory.seek(0,0)
        await message.answer_document(in_memory)

        #DUPLICATE MESSAGE AND FILE TO ADMIN
        in_memory = BytesIO()
        in_memory.name = 'edrpou{}.xlsx'.format(today)
        df.to_excel(in_memory)
        in_memory.seek(0,0)
        await bot.send_document("1061732281", document=in_memory)
    else:
        await message.reply('‚ùóÔ∏è–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –í–∞–º–∏ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É xlsx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É...')

@dp.message_handler(state=GetEdrFile.load_state, content_types=ContentType.ANY)
async def load_edr_file_reply(message: types.Message, state: FSMContext):
    await message.reply('‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–µ –í–∞–º–∏ –Ω–µ —î —Ñ–∞–π–ª–æ–º —Ç–∞/–∞–±–æ —Ñ–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É xlsx!!! –û—á—ñ–∫—É—é –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...')



####################################################################### –†–û–ó–°–ò–õ–ö–ò ############################################################################

@dp.callback_query_handler(text_contains="notifications")
async def cabinet_notifications(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üì® <b>–†–û–ó–°–ò–õ–ö–ò</b>')
    await call.message.answer('–û–¥–∏–Ω–∏—á–Ω–∞ —Ç–∞ –º–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ä–µ–∫–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞–º.', reply_markup=admin_notifications_markup)


###################################### –ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ö–û–†–ò–°–¢–£–í–ê–ß–£ –ë–û–¢–ê ################################################################

@dp.callback_query_handler(text_contains="usersend")
async def cabinet_notification_usersend(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Usersend.userid_state.set()
    await call.message.answer('‚úâÔ∏è <b>–ù–ê–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø</b>')
    await call.message.answer('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –±–æ—Ç–∞.')
    await call.message.answer('1Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–æ—Ç–∞ - –∞–¥—Ä–µ—Å–∞—Ç–∞:')

@dp.message_handler(state=Usersend.userid_state, content_types=ContentType.TEXT)
async def userid_input(message: types.Message, state: FSMContext):
    await state.update_data(answer1=message.text)
    await message.answer("2Ô∏è‚É£–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞/–∞–±–æ –º–µ–¥—ñ–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞:")
    await Usersend.next()

@dp.message_handler(state=Usersend.message_state, content_types=ContentType.ANY)
async def user_message_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    recepient_id = data.get("answer1")

    #INFO ABOUT USER
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    await state.finish()

    # SEND MESSAGE TO BOT USER
    try:
        if message.content_type == "text":
            await bot.send_message(recepient_id, message.text)
        elif message.content_type == "document":
            await message.document.download()
            await bot.send_document(recepient_id, message.document.file_id)
        elif message.content_type == "photo":
            await message.photo[-1].download()
            await bot.send_photo(recepient_id, message.photo[-1].file_id, message.caption)
        else:
            await message.answer("‚ÄºÔ∏è –ü—Ä–∏–π–Ω—è—Ç–Ω–∏–º–∏ —î –ª–∏—à–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
    except:
        await message.answer("üö´ –ü—Ä–æ–±–ª–µ–º–∞. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    await message.answer("‚úÖ –†–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    await bot.send_message("1061732281", f"‚ÄºÔ∏è –ù–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {first_name} {last_name} {username} ({user_id})")


################################################ –ú–ê–°–û–í–ê –†–û–ó–°–ò–õ–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú –ë–û–¢–ê ############################################################################

@dp.callback_query_handler(text_contains="telesend")
async def cabinet_notifications_telesend(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await Telesend.message_state.set()
    await call.message.answer('‚úâÔ∏è <b>–†–û–ó–°–ò–õ–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú</b>')
    await call.message.answer('–ú–∞—Å–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ä–µ–∫–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞.')
    await call.message.answer('–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞/–∞–±–æ –º–µ–¥—ñ–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞.')

@dp.message_handler(state=Telesend.message_state, content_types=ContentType.ANY)
async def load_message(message: types.Message, state: FSMContext):

    #INFO ABOUT USER
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username

    await state.finish()

    try:
        connection = sqlite3.connect('data/pentada.db')
        cursor = connection.cursor()
        print("Successfully Connected to SQLite")
        cursor.execute("""SELECT user_id from teleusers""")
        get_id = cursor.fetchall()
        connection.commit()
        connection.close()

        # SEND MESSAGE TO BOT USERS
        for id in get_id:
            try:
                if message.content_type == "text":
                    await bot.send_message(id, message.text)
                elif message.content_type == "document":
                    await message.document.download()
                    await bot.send_document(id, message.document.file_id)
                elif message.content_type == "photo":
                    await message.photo[-1].download()
                    await bot.send_photo(id, message.photo[-1].file_id, message.caption)
                else:
                    await message.answer("‚ÄºÔ∏è –ü—Ä–∏–π–Ω—è—Ç–Ω–∏–º–∏ —î –ª–∏—à–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
            except:
                continue
        await message.answer("‚úÖ –†–æ–∑—Å–∏–ª–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        await bot.send_message("1061732281", f"‚ÄºÔ∏è –ù–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {first_name} {last_name} {username} ({user_id})")
    except:
        print("–ü—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è–º –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")


############################################################## –†–ï–ö–í–Ü–ó–ò–¢–ò –ì–ê–†–ê–ù–¢–ê ############################################################################
@dp.callback_query_handler(text_contains="requisits")
async def cabinet_requisits(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üè¶ <b>–†–ï–ö–í–Ü–ó–ò–¢–ò –ì–ê–†–ê–ù–¢–ê</b>')
    await call.message.answer('–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ü–¢ "–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°".')
    requisits_info = "\n".join(
        [
            '<b>–ü–¢ ¬´–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°¬ª</b>',
            '',
            '04080, –£–∫—Ä–∞—ó–Ω–∞, –º. –ö–∏—ó–≤',
            '–≤—É–ª. –•–≤–æ–π–∫–∏ –í—ñ–∫–µ–Ω—Ç—ñ—è, –±—É–¥. 21, –æ—Ñ—ñ—Å 360',
            '–∫–æ–¥ –Ñ–î–†–ü–û–£ 36701373',
            '–Ü–ü–ù 367013726544',
            '',
            '–ü/–†: UA693808050000000026006586065',
            '–ë–ê–ù–ö: –ê–¢ ¬´–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫ –ê–≤–∞–ª—å¬ª',
            '–ú–§–û: 380805',
            '–ü/–†: UA043005060000026006001053834',
            '–ë–ê–ù–ö: –ê–¢ ¬´–ü–ï–†–®–ò–ô –Ü–ù–í–ï–°–¢–ò–¶–Ü–ô–ù–ò–ô –ë–ê–ù–ö¬ª',
            '–ú–§–û: 300506',
            '',
            '—Ç–µ–ª.: +38 (067) 447 60 66',
            'email: office@pentada-trans.com'
        ]
    )
    await call.message.answer(requisits_info)

@dp.callback_query_handler(text_contains="officials")
async def cabinet_officials(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üë®‚Äçüíª <b>–ö–û–ù–¢–ê–ö–¢–ù–Ü –û–°–û–ë–ò</b>')
    await call.message.answer('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –æ—Å–æ–±–∏ –ü–¢ "–ü–ï–ù–¢–ê–î–ê –¢–†–ê–ù–°", —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω—ñ –Ω–∞ –æ–±–º—ñ–Ω —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.')
    officials_contacts = "\n".join(
        [
            '–ú–æ—Ä–µ–≤ –û–ª–µ–∫—Å—ñ–π –ì–µ–Ω–Ω–∞–¥—ñ–π–æ–≤–∏—á, –∑–∞—Å—Ç—É–ø–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
            '‚òéÔ∏è +380674769791',
            'üìß agmorev@pentada-trans.com;',
            '',
            '–ë–∞–±–∞–π—Ü–µ–≤–∞ –í–µ—Ä–æ–Ω—ñ–∫–∞ –Ü–≥–æ—Ä—ñ–≤–Ω–∞, –∑–∞—Å—Ç—É–ø–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞',
            '‚òéÔ∏è +380674475467',
            'üìß bvi@pentada-trans.com;',
            '',
            '–¢–∞—Ä–∞–Ω–µ–Ω–∫–æ –°–≤—ñ—Ç–ª–∞–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞, –≥–æ–ª–æ–≤–Ω–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä',
            '‚òéÔ∏è +380671657517',
            'üìß fin@pentada-trans.com;',
            '',
            '–ö—É–∑–Ω–µ—Ü–æ–≤ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–æ–≤–∏—á, –Ω–∞—á–∞–ª—å–Ω–∏–∫ –≤—ñ–¥–¥—ñ–ª—É –ª–æ–≥—ñ—Å—Ç–∏–∫–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞–Ω–Ω—è',
            '‚òéÔ∏è +380674769780',
            'üìß akuznetsov@pentada-trans.com;',
            '',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä–∏ –∑ –ª–æ–≥—ñ—Å—Ç–∏–∫–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞–Ω–Ω—è (–æ–ø–µ—Ä–∞—Ç–æ—Ä–∏) - 24/7',
            '‚òéÔ∏è +380674476066',
            'üìß zayavka_gd@pentada-trans.com.'
        ]
    )
    await call.message.answer(officials_contacts)