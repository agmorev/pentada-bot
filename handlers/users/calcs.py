from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp
from states.wcalc import Warranty_calculation, Cvalue_calculation
from keyboards.inline import calcs_markup, vehicle_markup
import re
import datetime
import sqlite3
import pandas as pd


def wcalc_algorithm(vehicle, code, weight, value):
    wtotal = 0
    if vehicle == '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π':
        if code == '2203' or code == '2204' or code == '2205' or code == '2206':
            if value <= 400000:
                wtotal = 500
            else:
                wtotal = value*0.05/100
            if wtotal < 500:
                wtotal = 500
        elif code == '2207' or code == '2208':
            wtotal = value*0.05/100
            if wtotal < 500:
                wtotal = 500
        elif value <= 50000:
            wtotal = 250
        elif (value > 50000) and (value <= 100000):
            wtotal = 250
        elif (value > 100000) and (value <= 200000):
            wtotal = 500
        elif (value > 200000) and (value <= 300000):
            wtotal = 500
        elif (value > 300000) and (value <= 500000):
            wtotal = 500
        elif (value > 500000) and (value <= 800000):
            wtotal = 500
        elif (value > 800000) and (value <= 1000000):
            wtotal = 500
        elif (value > 1000000) and (value <= 1500000):
            wtotal = value*0.05/100
        elif (value > 1500000) and (value <= 2000000):
            wtotal = value*0.05/100
        elif value > 2000000:
            wtotal = value*0.05/100
    if vehicle == '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π':
        usd = 26
        if code == '2710' or code == '2707':
            wtotal = weight/1000*0.3*usd
        elif code == '2711':
            wtotal = weight/1000*0.35*usd
        elif code == '2709' or code == '2905':
            wtotal = weight/1000*0.25*usd
        elif code == '2207' or '2208':
            wtotal = value*0.2/100
        elif code == '2204':
            wtotal = weight/1000*0.32*usd
        elif code == '3105':
            wtotal = weight/1000*0.25*usd
        elif code == '2909':
            wtotal = weight/1000*0.4*usd
        elif value <= 50000:
            wtotal = 450
        elif (value > 50000) and (value <= 100000):
            wtotal = 620
        elif (value > 100000) and (value <= 200000):
            wtotal = 1000
        elif (value > 200000) and (value <= 300000):
            wtotal = 1200
        elif (value > 300000) and (value <= 500000):
            wtotal = 1500
        elif (value > 500000) and (value <= 800000):
            wtotal = 1700
        elif (value > 800000) and (value <= 1000000):
            wtotal = 2100
        elif (value > 1000000) and (value <= 1500000):
            wtotal = 2800
        elif (value > 1500000) and (value <= 2000000):
            wtotal = 3300
        elif value > 2000000:
            wtotal = value*0.2/100
    if vehicle == '–ú–æ—Ä—Å—å–∫–∏–π':
        wtotal = weight/1000*0.25*usd
    if vehicle == '–¢—Ä—É–±–æ–ø—Ä–æ–≤—ñ–¥–Ω–∏–π':
        wtotal = weight/1000*0.35*usd
    return wtotal

@dp.message_handler(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∏")
async def bot_represents(message: types.Message):
    await message.answer('<b>–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ò</b>')
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É''',
                         reply_markup=calcs_markup)


#Warranty calculation process
@dp.callback_query_handler(text_contains="warranty_calc")
async def warranty_calculator(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üí∂ <b>–í–ê–†–¢–Ü–°–¢–¨ –ì–ê–†–ê–ù–¢–Ü–á</b>')
    await call.message.answer('‚ö†Ô∏è–î–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥–∞—Ä–∞–Ω—Ç—ñ—ó –Ω–∞–¥–∞–π—Ç–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 4 –ø–∏—Ç–∞–Ω–Ω—è')
    await call.message.answer('1Ô∏è‚É£–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É:', reply_markup=vehicle_markup)
    await Warranty_calculation.vehicle_state.set()

@dp.callback_query_handler(text=['auto', 'railway', 'sea', 'pipeline'], state=Warranty_calculation.vehicle_state)
async def answer_vehicle(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'auto':
        vehicle = '–ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–∏–π'
    elif call.data == 'railway':
        vehicle = '–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π'
    elif call.data == 'sea':
        vehicle = '–ú–æ—Ä—Å—å–∫–∏–π'
    elif call.data == 'pipeline':
        vehicle = '–¢—Ä—É–±–æ–ø—Ä–æ–≤—ñ–¥–Ω–∏–π'
    await state.update_data(answer1=vehicle)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(vehicle)
    await call.message.answer("2Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ–≤–∞—Ä—É –Ω–∞ —Ä—ñ–≤–Ω—ñ 4-—Ö –∑–Ω–∞–∫—ñ–≤:")
    await Warranty_calculation.next()

@dp.message_handler(state=Warranty_calculation.cncode_state)
async def answer_cncode(message: types.Message, state: FSMContext):
    if re.match(r'\d{4}', message.text) and len(message.text) == 4:
        cncode = message.text
        await state.update_data(answer2=cncode)
        await message.answer("3Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö:")
        await Warranty_calculation.next()
    else:
        await message.answer('‚ùóÔ∏è–ö–æ–¥ —Ç–æ–≤–∞—Ä—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏—Ö 4 –∑–Ω–∞–∫–∏ (—Ç–æ–≤–∞—Ä–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è)!!! –û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ —Ç–æ–≤–∞—Ä—É...')

@dp.message_handler(state=Warranty_calculation.weight_state)
async def answer_weight(message: types.Message, state: FSMContext):
    if re.match(r'^[0-9]+$', message.text):
        weight = message.text
        await state.update_data(answer3=weight)
        await message.answer("4Ô∏è‚É£–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤:")
        await Warranty_calculation.next()
    else:
        await message.answer('‚ùóÔ∏è–í–∞–≥–∞ —Ç–æ–≤–∞—Ä—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏!!! –û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É —Ç–æ–≤–∞—Ä—É...')

@dp.message_handler(state=Warranty_calculation.value_state)
async def answer_value(message: types.Message, state: FSMContext):
    if re.match(r'^[0-9]+$', message.text):
        data = await state.get_data()
        vehicle = data.get("answer1")
        cncode = data.get("answer2")
        weight = data.get("answer3")
        value = message.text
        await state.update_data(answer4=value)
        price = str(float("{0:.2f}".format(wcalc_algorithm(vehicle,cncode,int(weight),int(value)))))
        result = '–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É: '+str(vehicle)+'\n–ö–æ–¥ —Ç–æ–≤–∞—Ä—É: '+str(cncode)+'\n–í–∞–≥–∞ —Ç–æ–≤–∞—Ä—É: '+str(weight)+' –∫–≥\n–°—É–º–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤: '+str(value)+' –≥—Ä–Ω\n-----------------------------------------------------\n<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç—ñ—ó: '+price+' –≥—Ä–Ω</b>'

        userid = message.from_user.id
        fullname = message.from_user.full_name
        date = datetime.datetime.now()
        try:
            conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
            cursor = conn.cursor()
            print('---------------------CALCULATOR--------------------------')
            print("Calculator successfully connected to SQLite | ", fullname, ' | ', date)
            query2 = "INSERT INTO calcs ('userid', 'fullname', 'vehicle', 'code', 'weight', 'value', 'price', 'date') VALUES (?, ?, ?, ?, ?, ?, ?, ?);"
            variables = (userid, fullname, vehicle, cncode, weight, value, price, date)
            cursor.execute(query2, variables)
            conn.commit()
            print("Record inserted successfully into calcs table ", cursor.rowcount)
            print(userid, fullname, vehicle, cncode, weight, value, price, date)
            cursor.close()

        except sqlite3.Error as error:
            print("Failed to insert data into sqlite table", error)
        finally:
            if (conn):
                conn.close()
                print("The SQLite connection is closed")

        await message.answer('‚ÄºÔ∏è <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º</b> ‚ÄºÔ∏è\n–û—Å—Ç–∞—Ç–æ—á–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±—É–¥–µ —É–∑–≥–æ–¥–∂–µ–Ω–æ –ø—Ä–∏ —É–∫–ª–∞–¥–∞–Ω–Ω—ñ –¥–æ–≥–æ–≤–æ—Ä—É –∑ –≥–∞—Ä–∞–Ω—Ç–æ–º.')
        await message.answer(result)
        await state.finish()
    else:
        await message.answer('‚ùó–°—É–º–∞ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º!!!!!! –û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É...')


#Customs value calculation process
@dp.callback_query_handler(text_contains="customs_value")
async def cvalue_calculator(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üí≤ <b>–ü–û–ö–ê–ó–ù–ò–ö–ò –ú–ò–¢–ù–û–á –í–ê–†–¢–û–°–¢–Ü</b>')
    await call.message.answer('‚ö†Ô∏è–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º–∏—Ç–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ –∫–æ–¥–æ–º —Ç–æ–≤–∞—Ä—É —Ç–∞ –∫—Ä–∞—ó–Ω–æ—é –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è')
    await call.message.answer('üë®‚Äçüíª –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ–≤–∞—Ä—É (10 –∑–Ω–∞–∫—ñ–≤):')
    await Cvalue_calculation.cncode_state.set()

@dp.message_handler(state=Cvalue_calculation.cncode_state)
async def cvalue_cncode(message: types.Message, state: FSMContext):
    if re.match(r'\d{10}', message.text) and len(message.text) == 10:
        cncode = message.text
        await state.update_data(answer1=cncode)
        await message.answer("üë®‚Äçüíª–í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–æ—ó –Ω–∞–∑–≤–∏ (PL) –∞–±–æ –ø–æ–≤–Ω–æ—ó (–ü–æ–ª—å—â–∞):")
        await Cvalue_calculation.next()
    else:
        await message.answer('‚ùóÔ∏è–ö–æ–¥ —Ç–æ–≤–∞—Ä—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 –∑–Ω–∞–∫—ñ–≤!!! –û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ —Ç–æ–≤–∞—Ä—É...')

@dp.message_handler(state=Cvalue_calculation.country_state)
async def cvalue_country(message: types.Message, state: FSMContext):
    if re.match(r'^[A-Z–ê-—è -]+$', message.text):
        doc = open('/home/agmorev/pentadabot_v2/data/waiting.mp4', 'rb')
        msg = await message.answer_animation(doc, caption='–ó–∞—á–µ–∫–∞–π—Ç–µ...')
        df = pd.read_excel('/home/agmorev/pentadabot_v2/data/cvalue.xlsx', sheet_name=0)
        country = message.text
        data = await state.get_data()
        cncode = data.get("answer1")
        df['–ö—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'] = df['–ö—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'].str.upper()
        try:
            cond = df[(df['–ö–æ–¥ –£–ö–¢–ó–ï–î –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è - 10 –∑–Ω–∞–∫—ñ–≤'] == int(cncode)) & (df['–ö—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'].str.contains(country.upper()))]
            min_value = cond['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å'].values[0]
            avr_value = cond['–°–µ—Ä–µ–¥–Ω—è –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å'].values[0]
            max_value = cond['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å'].values[0]
            result = '*–ö–æ–¥ —Ç–æ–≤–∞—Ä—É:* '+str(cncode)+'\n*–ö—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:* '+str(country)+'\n*–ú—ñ–Ω. –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* '+str("{:.2f}".format(min_value))+'$\n*–°–µ—Ä. –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* '+str("{:.2f}".format(avr_value))+'$\n*–ú–∞–∫—Å. –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* '+str("{:.2f}".format(max_value))+'$'
            await msg.delete()
            await message.answer('‚ÄºÔ∏è –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∞–Ω–∏—Ö –î–µ—Ä–∂–º–∏—Ç—Å–ª—É–∂–±–∏')
            await message.answer(result, parse_mode='Markdown')
            await state.finish()
        except:
            await msg.delete()
            await message.answer('‚ÄºÔ∏è –ó–∞–ø–∏—Å –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
            await state.finish()

        userid = message.from_user.id
        fullname = message.from_user.full_name
        date = datetime.datetime.now()
        try:
            conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
            # conn = sqlite3.connect('D:\PYTHON\PROJECTS\Bots\pentadabot_v2\data\pentada.db')
            cursor = conn.cursor()
            print("Customs value block successfully connected to SQLite | ", fullname, ' | ', date)
            query4 = "INSERT INTO cvalue ('userid', 'fullname', 'cncode', 'country', 'date') VALUES (?, ?, ?, ?, ?);"
            variables = (userid, fullname, cncode, country, date)
            cursor.execute(query4, variables)
            conn.commit()
            print("Record inserted successfully into cvalue table ", cursor.rowcount)
            print(userid, fullname, cncode, country, date)
            cursor.close()

        except sqlite3.Error as error:
            print("Failed to insert data into sqlite table", error)
        finally:
            if (conn):
                conn.close()
                print("The SQLite connection is closed")

    else:
        await message.answer('‚ùóÔ∏è–û—á—ñ–∫—É—é –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω–∏ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è...')











#Customs payments calculation process
@dp.callback_query_handler(text_contains="payments_calc")
async def customs_calculator(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üíµ <b>–ú–ò–¢–ù–Ü –ü–õ–ê–¢–ï–ñ–Ü</b>')
    await call.message.answer('‚ùóÔ∏è–î–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —Ñ–æ—Ä–º—É')