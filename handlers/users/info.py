from aiogram import types
from loader import dp
from keyboards.inline import info_markup, edr_markup
import datetime
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.storage import FSMContext
import feedparser
import requests
import json
import pandas as pd
import re
from states.edrpou import Edrpou
from states.zed import Zed
from states.broker import Broker
import sqlite3


@dp.message_handler(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ")
async def bot_info(message: types.Message):
    await message.answer('<b>–Ü–ù–§–û–†–ú–ê–¶–Ü–ô–ù–Ü –†–ï–°–£–†–°–ò</b>')
    await message.answer('–ù–æ–≤–∏–Ω–∏ –≤ –º–∏—Ç–Ω—ñ–π —Å—Ñ–µ—Ä—ñ, –∑–º—ñ–Ω–∏ –≤ –º–∏—Ç–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—ñ, –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ –∑ –ø–∏—Ç–∞–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π, –º–∏—Ç–Ω—ñ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ —Ç–∞ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏',
                         reply_markup=info_markup)

@dp.callback_query_handler(text_contains="news")
async def info_news(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üì∞ <b>–ú–ò–¢–ù–Ü –ù–û–í–ò–ù–ò</b>')
    await call.message.answer('–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –≤ –º–∏—Ç–Ω—ñ–π —Å—Ñ–µ—Ä—ñ, –∑–º—ñ–Ω–∏ –≤ –º–∏—Ç–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤—ñ, –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∞ —Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è –º–∏—Ç–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª')
    url = 'http://www.qdpro.com.ua/rss'
    posts = feedparser.parse(url)
    posts.entries = sorted(list(posts.entries)[:10], key=lambda k: k['published'])
    for entry in posts.entries:
        link_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url=entry['link']),
                ],
            ],
        )
        fdate = datetime.datetime.strptime(entry.get('published'), '%a, %d %b %Y %H:%M:%S %z').strftime('%d.%m.%Y %H:%M')
        await call.message.answer(entry['title']+'|'+fdate, reply_markup=link_markup)

@dp.callback_query_handler(text_contains="laws")
async def info_laws(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('‚öñÔ∏è <b>–ó–ê–ö–û–ù–û–î–ê–í–°–¢–í–û</b>')
    await call.message.answer('–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ñ –∞–∫—Ç–∏ –∑ –ø–∏—Ç–∞–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π')
    link_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url='https://zakon.rada.gov.ua/laws/show/4495-17#n2535'),
            ],
        ],
    )
    await call.message.answer('1Ô∏è‚É£ –ú–∏—Ç–Ω–∏–π –∫–æ–¥–µ–∫—Å –£–∫—Ä–∞—ó–Ω–∏ | ‚Ññ 4495-VI, 13.03.2012, –ö–æ–¥–µ–∫—Å, –í–µ—Ä—Ö–æ–≤–Ω–∞ –†–∞–¥–∞ –£–∫—Ä–∞—ó–Ω–∏', reply_markup=link_markup)
    link_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url='https://zakon.rada.gov.ua/laws/show/461-2012-%D0%BF#Text'),
            ],
        ],
    )
    await call.message.answer('2Ô∏è‚É£ –ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤, –≤–≤–µ–∑–µ–Ω–Ω—è —è–∫–∏—Ö –Ω–∞ –º–∏—Ç–Ω—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞/–∞–±–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—î—é –£–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ—Ö—ñ–¥–Ω–∏–º —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–º —Ç—Ä–∞–Ω–∑–∏—Ç–æ–º –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ —É–º–æ–≤–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ–≥–æ –Ω–∞–¥–∞–Ω–Ω—è –º–∏—Ç–Ω–∏–º –æ—Ä–≥–∞–Ω–∞–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å–ø–ª–∞—Ç–∏ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ | ‚Ññ461, 21.05.2012, –ü–æ—Å—Ç–∞–Ω–æ–≤–∞, –ö–∞–±—ñ–Ω–µ—Ç –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏', reply_markup=link_markup)
    link_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url='https://zakon.rada.gov.ua/laws/show/z0860-20#Text'),
            ],
        ],
    )
    await call.message.answer('3Ô∏è‚É£ –ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º –±–ª–∞–Ω–∫—ñ–≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π —Ç–∞ –ø–æ—Ä—è–¥–∫—É —ó—Ö –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è | ‚Ññ404, 07.07.2020, –ù–∞–∫–∞–∑, –ú—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏', reply_markup=link_markup)
    link_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url='https://zakon.rada.gov.ua/laws/show/390-2013-%D0%BF#Text'),
            ],
        ],
    )
    await call.message.answer('4Ô∏è‚É£ –ü—Ä–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—ñ–≤ –ø—Ä–æ–ø—É—Å–∫—É —á–µ—Ä–µ–∑ –¥–µ—Ä–∂–∞–≤–Ω–∏–π –∫–æ—Ä–¥–æ–Ω –£–∫—Ä–∞—ó–Ω–∏, —á–µ—Ä–µ–∑ —è–∫—ñ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø—ñ–¥–∞–∫—Ü–∏–∑–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤, —Ç–∞ –≤–∏–∑–Ω–∞–Ω–Ω—è —Ç–∞–∫–∏–º–∏, —â–æ –≤—Ç—Ä–∞—Ç–∏–ª–∏ —á–∏–Ω–Ω—ñ—Å—Ç—å, –¥–µ—è–∫–∏—Ö –∞–∫—Ç—ñ–≤ –ö–∞–±—ñ–Ω–µ—Ç—É –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏ | ‚Ññ390, 29.05.2013, –ü–æ—Å—Ç–∞–Ω–æ–≤–∞, –ö–∞–±—ñ–Ω–µ—Ç –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏', reply_markup=link_markup)
    link_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ...", url='https://zakon.rada.gov.ua/laws/show/85-2018-%D0%BF#Text'),
            ],
        ],
    )
    await call.message.answer('5Ô∏è‚É£ –ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ü–æ—Ä—è–¥–∫—É –Ω–∞–¥–∞–Ω–Ω—è —Ä–æ–∑—Å—Ç—Ä–æ—á–µ–Ω–Ω—è —Å–ø–ª–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫—É –Ω–∞ –¥–æ–¥–∞–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω—å –ø—ñ–¥ —á–∞—Å –≤–≤–µ–∑–µ–Ω–Ω—è –Ω–∞ –º–∏—Ç–Ω—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –£–∫—Ä–∞—ó–Ω–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ | ‚Ññ85, 07.02.2018, –ü–æ—Å—Ç–∞–Ω–æ–≤–∞, –ö–∞–±—ñ–Ω–µ—Ç –ú—ñ–Ω—ñ—Å—Ç—Ä—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏', reply_markup=link_markup)

@dp.callback_query_handler(text_contains="termins")
async def info_termins(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üî† <b>–¢–ï–†–ú–Ü–ù–û–õ–û–ì–Ü–Ø</b>')
    await call.message.answer('–¢–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∑ –ø–∏—Ç–∞–Ω—å —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π')
    await call.message.answer('''1Ô∏è‚É£ <u>–ì–∞—Ä–∞–Ω—Ç (–Ω–µ–∑–∞–ª–µ–∂–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ—Å–µ—Ä–µ–¥–Ω–∏–∫)</u> ‚Äì —é—Ä–∏–¥–∏—á–Ω–∞ –æ—Å–æ–±–∞, —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞ –¥–æ –†–µ—î—Å—Ç—Ä—É –≥–∞—Ä–∞–Ω—Ç—ñ–≤, –¥—ñ—î –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ –ú–∏—Ç–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –£–≥–æ–¥–∏ –ø—Ä–æ –Ω–∞–¥–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π –∑ –î–µ—Ä–∂–º–∏—Ç—Å–ª—É–∂–±–æ—é —Ç–∞ –º–∞—î –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏–¥–∞—á—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π –º–∏—Ç–Ω–∏–º –æ—Ä–≥–∞–Ω–∞–º.''')
    await call.message.answer('''2Ô∏è‚É£ <u>–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è</u> —î –±–µ–∑–≤—ñ–¥–∫–ª–∏—á–Ω–∏–º –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω–Ω—è–º –≥–∞—Ä–∞–Ω—Ç–∞, –≤–Ω–µ—Å–µ–Ω–æ–≥–æ –¥–æ —Ä–µ—î—Å—Ç—Ä—É –≥–∞—Ä–∞–Ω—Ç—ñ–≤, –≤–∏–ø–ª–∞—Ç–∏—Ç–∏ –Ω–∞ –≤–∏–º–æ–≥—É –º–∏—Ç–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω—É –∫–æ—à—Ç–∏ –≤ –º–µ–∂–∞—Ö –ø–µ–≤–Ω–æ—ó —Å—É–º–∏ —É —Ä–∞–∑—ñ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–∏—Ö —Ü—ñ—î—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω—å —ñ–∑ —Å–ø–ª–∞—Ç–∏ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤.''')
    await call.message.answer('''3Ô∏è‚É£ <u>–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è</u> –Ω–∞–¥–∞—î—Ç—å—Å—è —É –ø–∞–ø–µ—Ä–æ–≤–æ–º—É –∞–±–æ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ –Ω–∞ —Å—É–º—É –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞:
1) –æ–¥–Ω—ñ—î—é –º–∏—Ç–Ω–æ—é –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—î—é –≤ –º–µ–∂–∞—Ö –æ–¥–Ω—ñ—î—ó –∑–æ–≤–Ω—ñ—à–Ω—å–æ—Ç–æ—Ä–≥–æ–≤–µ–ª—å–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó;
2) –æ–¥–Ω—ñ—î—é –º–∏—Ç–Ω–æ—é –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—î—é –≤ –º–µ–∂–∞—Ö –æ–¥–Ω—ñ—î—ó —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó;
3) –æ–¥–Ω–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—é –∑–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—ñ–≤;
4) –æ–¥–Ω—ñ—î—é –æ–ø–µ—Ä–∞—Ü—ñ—î—é –∑ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –º–∏—Ç–Ω–∏–π –∫–æ—Ä–¥–æ–Ω –£–∫—Ä–∞—ó–Ω–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –≥—Ä–æ–º–∞–¥—è–Ω–∞–º–∏ —É –≤–∏–ø–∞–¥–∫–∞—Ö, –≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª–æ–º XII –ú–∏—Ç–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏.''')
    await call.message.answer('''4Ô∏è‚É£ <u>–ë–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è</u> –Ω–∞–¥–∞—î—Ç—å—Å—è –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å–ø–ª–∞—Ç–∏ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –º–∏—Ç–Ω–∏–º–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è–º–∏ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –∑–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏ –≤–≤–µ–∑–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –º–∏—Ç–Ω—É —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –£–∫—Ä–∞—ó–Ω–∏ –∑ –º–µ—Ç–æ—é —Ç—Ä–∞–Ω–∑–∏—Ç—É –∞–±–æ –¥–ª—è –≤—ñ–ª—å–Ω–æ–≥–æ –æ–±—ñ–≥—É –Ω–∞ —Ü—ñ–π —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É.''')
    await call.message.answer('''5Ô∏è‚É£ <u>–ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è</u> –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å–ø–ª–∞—Ç–∏ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω–Ω—è–º–∏ –ê–ï–û, —â–æ –≤–∏–ø–ª–∏–≤–∞—é—Ç—å –∑ –º–∏—Ç–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ú–∏—Ç–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ —É –±—É–¥—å-—è–∫—ñ–π –º–∏—Ç–Ω–∏—Ü—ñ –Ω–∞ –≤—Å—ñ–π –º–∏—Ç–Ω—ñ–π —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∏—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É.''')
    await call.message.answer('''6Ô∏è‚É£ <u>–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫</u> ‚Äì —Ñ–∞–∫—Ç –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Å–æ–±–æ—é, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—é –∑–∞ —Å–ø–ª–∞—Ç—É –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤, –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω—å, –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–∏—Ö —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é, —â–æ –≤–∏–ø–ª–∏–≤–∞—é—Ç—å –∑ –º–∏—Ç–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä, —É –∑–≤‚Äô—è–∑–∫—É –∑ –Ω–∞—Å—Ç–∞–Ω–Ω—è–º —è–∫–æ–≥–æ –≥–∞—Ä–∞–Ω—Ç –∑–æ–±–æ–≤‚Äô—è–∑—É—î—Ç—å—Å—è —Å–ø–ª–∞—Ç–∏—Ç–∏ –º–∏—Ç–Ω–æ–º—É –æ—Ä–≥–∞–Ω—É –∫–æ—à—Ç–∏ –≤ —Å—É–º—ñ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é.''')

@dp.callback_query_handler(text_contains="edrpou")
async def edr_request(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer('üí∂ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–û–ù–¢–†–ê–ì–ï–ù–¢–ê</b>')
    await call.message.answer('‚ö†Ô∏è–ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —é—Ä–∏–¥–∏—á–Ω—É –æ—Å–æ–±—É –∞–±–æ —Ñ—ñ–∑–∏—á–Ω—É –æ—Å–æ–±—É-–ø—ñ–¥–ø—Ä–∏—î–º—Ü—è –∑–∞ –∫–æ–¥–æ–º –Ñ–î–†–ü–û–£ (8 –∑–Ω–∞–∫—ñ–≤) –∞–±–æ –Ω–∞–∑–≤–æ—é')
    await call.message.answer('üë®‚Äçüíª –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ –Ω–∞–∑–≤—É –æ—Å–æ–±–∏:')
    await Edrpou.edrpou_state.set()

@dp.message_handler(state=Edrpou.edrpou_state)
async def select_status(message: types.Message, state: FSMContext):
    await state.update_data(q=message.text)

    # Save record about user to database
    userid = message.from_user.id
    fullname = message.from_user.full_name
    q = message.text
    date = datetime.datetime.now()
    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        cursor = conn.cursor()
        print("EDR service successfully connected to SQLite | ", fullname, ' | ', date)
        query3 = "INSERT INTO edrpou ('userid', 'fullname', 'q', 'date') VALUES (?, ?, ?, ?);"
        variables = (userid, fullname, q, date)
        cursor.execute(query3, variables)
        conn.commit()
        print("Record inserted successfully into calcs table ", cursor.rowcount)
        print(userid, fullname, q, date)
        cursor.close()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞", reply_markup=edr_markup)
    await Edrpou.next()

@dp.callback_query_handler(text=['stopped', 'registered', 'stopping', 'bankruptcy', 'invalid', 'sanitation', 'canceled', 'all'], state=Edrpou.company_status)
async def answer_status(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    query = await state.get_data()
    q = query.get("q")
    response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}'.format(q))
    data = json.loads(response.text)
    print(list(data.values()).count('–ø—Ä–∏–ø–∏–Ω–µ–Ω–æ'))
    if call.data == 'stopped':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=1'.format(q))
    elif call.data == 'registered':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=2'.format(q))
    elif call.data == 'stopping':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=3'.format(q))
    elif call.data == 'bankruptcy':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=4'.format(q))
    elif call.data == 'invalid':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=5'.format(q))
    elif call.data == 'sanitation':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=6'.format(q))
    elif call.data == 'canceled':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}&state[]=7'.format(q))
    elif call.data == 'all':
        response = requests.get('https://e-data.com.ua/api/v1/search/data/?search={}'.format(q))

    data = json.loads(response.text)


    try:
        for fop in range(len(data['data']['fops'])):
            try:
                fop_id = data['data']['fops'][fop]['id']
                fop_name = data['data']['fops'][fop]['name']
                fop_address = data['data']['fops'][fop]['address']
                fop_state_name = data['data']['fops'][fop]['state_name']
                fop_reg_date = data['data']['fops'][fop]['reg_date']
                fop_link_markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üìë –î–µ—Ç–∞–ª—ñ...", callback_data="fop_details_"+fop_id),
                        ],
                    ],
                )
                await call.message.answer('*–ù–∞–∑–≤–∞:* {}\n*–°—Ç–∞—Ç—É—Å:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n'.format(fop_name, fop_state_name, fop_address, fop_reg_date), reply_markup=fop_link_markup, parse_mode="Markdown")
            except:
                continue

        for uo in range(len(data['data']['uos'])):
            try:
                try:
                    uo_id = data['data']['uos'][uo]['id']
                except:
                    uo_id = data['data']['uos'][uo]['uo_id']
                try:
                    uo_name = data['data']['uos'][uo]['name']
                except:
                    uo_name = data['data']['uos'][uo]['uo_name']
                try:
                    uo_edrpou = data['data']['uos'][uo]['edrpou']
                except:
                    uo_edrpou = data['data']['uos'][uo]['uo_edrpou']
                try:
                    uo_address = data['data']['uos'][uo]['address']
                except:
                    uo_address = data['data']['uos'][uo]['uo_address']
                uo_state_name = data['data']['uos'][uo]['state_name']
                try:
                    uo_reg_date = data['data']['uos'][uo]['reg_date']
                except:
                    uo_reg_date = data['data']['uos'][uo]['uo_reg_date']
                uo_link_markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üìë –î–µ—Ç–∞–ª—ñ...", callback_data="uo_details_"+uo_id),
                        ],
                    ],
                )
                await call.message.answer('*–ù–∞–∑–≤–∞:* {}\n*–°—Ç–∞—Ç—É—Å:* {}\n*–Ñ–î–†–ü–û–£:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}'.format(uo_name, uo_state_name, uo_edrpou, uo_address, uo_reg_date), reply_markup=uo_link_markup, parse_mode="Markdown")
            except:
                continue
    except:
        await call.message.answer('üö´ –í –Ñ–¥–∏–Ω–æ–º—É –¥–µ—Ä–∂–∞–≤–Ω–æ–º—É —Ä–µ—î—Å—Ç—Ä—ñ *–≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏* –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º!!!', parse_mode="Markdown")
    await state.finish()

@dp.callback_query_handler(text_contains="details_")
async def edr_details(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    if call.data.startswith("fop_details_"):
        c_id = call.data[12:]
        res = requests.get('https://e-data.com.ua/api/v1/fop/data/{}'.format(c_id))
        data = json.loads(res.text)
        c_name = data['data']['name']
        c_address = data['data']['address']
        c_state_name = data['data']['state_name']
        c_reg_date = data['data']['reg_date']
        c_reg_num = data['data']['reg_num']
        c_contacts = data['data']['contacts']
        c_activity = data['data']['activity_kinds']
        await call.message.answer('*–ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:*', parse_mode="Markdown")
        await call.message.answer('*–ù–∞–∑–≤–∞:* {}\n*–°—Ç–∞—Ç—É—Å:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n*–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n*–ö–æ–Ω—Ç–∞–∫—Ç–∏:* {}'.format(c_name, c_state_name, c_address, c_reg_date, c_reg_num, c_contacts), parse_mode="Markdown")
        await call.message.answer('*–í–ò–î–ò –î–Ü–Ø–õ–¨–ù–û–°–¢–Ü:*', parse_mode="Markdown")
        for i in range(len(c_activity)):
            activity_code = data['data']['activity_kinds'][i]['code']
            activity_name = data['data']['activity_kinds'][i]['name']
            await call.message.answer('*{}* - {}'.format(activity_code, activity_name), parse_mode="Markdown")
    if call.data.startswith("uo_details_"):
        c_id = call.data[11:]
        res = requests.get('https://e-data.com.ua/api/v1/uo/data/{}'.format(c_id))
        data = json.loads(res.text)
        c_name = data['data']['name']
        c_state_name = data['data']['state_name']
        c_edrpou = data['data']['edrpou']
        c_address = data['data']['address']
        c_management = data['data']['superior_management']
        c_authorized_capital = data['data']['authorized_capital']
        c_reg_date = data['data']['reg_date']
        c_reg_num = data['data']['reg_num']
        c_authority_name = data['data']['authority_name']
        c_contacts = data['data']['contacts']
        await call.message.answer('*–ó–ê–ì–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:*', parse_mode="Markdown")
        await call.message.answer('*–ù–∞–∑–≤–∞:* {}\n*–°—Ç–∞—Ç—É—Å:* {}\n*–Ñ–î–†–ü–û–£:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–û—Ä–≥–∞–Ω–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:* {}\n*–°—Ç–∞—Ç—É—Ç–Ω–∏–π –∫–∞–ø—ñ—Ç–∞–ª:* {}\n*–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n*–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n*–û—Ä–≥–∞–Ω —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:* {}\n*–ö–æ–Ω—Ç–∞–∫—Ç–∏:* {}'.format(c_name, c_state_name, c_edrpou, c_address, c_management, c_authorized_capital, c_reg_date, c_reg_num, c_authority_name, c_contacts), parse_mode="Markdown")

        await call.message.answer('*–ó–ê–°–ù–û–í–ù–ò–ö–ò:*', parse_mode="Markdown")
        for f in range(len(data['data']['founders'])):
            founders = data['data']['founders'][f]
            await call.message.answer('{}'.format(founders), parse_mode="Markdown")

        await call.message.answer('*–ë–ï–ù–ï–§–Ü–¶–Ü–ê–†–ò:*', parse_mode="Markdown")
        for b in range(len(data['data']['beneficiaries'])):
            beneficiaries = data['data']['beneficiaries'][b]
            await call.message.answer('{}'.format(beneficiaries), parse_mode="Markdown")

        await call.message.answer('*–ö–ï–†–Ü–í–ù–ò–ö–ò:*', parse_mode="Markdown")
        for s in range(len(data['data']['singers'])):
            signers = data['data']['singers'][s]
            await call.message.answer('{}'.format(signers), parse_mode="Markdown")

        await call.message.answer('*–í–ò–î–ò –î–Ü–Ø–õ–¨–ù–û–°–¢–Ü:*', parse_mode="Markdown")
        for i in range(len(data['data']['activity_kinds'])):
            activity_code = data['data']['activity_kinds'][i]['code']
            activity_name = data['data']['activity_kinds'][i]['name']
            await call.message.answer('*{}* - {}'.format(activity_code, activity_name), parse_mode="Markdown")


@dp.callback_query_handler(text_contains="zed")
async def zed_request(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer("üóÑ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–£–ë'–Ñ–ö–¢–ê –ó–ï–î</b>")
    await call.message.answer('‚ö†Ô∏è–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–º –∫–æ–¥–æ–º –∞–±–æ –Ω–∞–∑–≤–æ—é')
    await call.message.answer('üë®‚Äçüíª –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ –Ω–∞–∑–≤—É –æ—Å–æ–±–∏:')
    await Zed.zed_state.set()

@dp.message_handler(state=Zed.zed_state)
async def zed_status(message: types.Message, state: FSMContext):
    q = message.text
    await state.update_data(q=message.text)
    doc = open('/home/agmorev/pentadabot_v2/data/waiting.mp4', 'rb')
    msg = await message.answer_animation(doc, caption='–ó–∞—á–µ–∫–∞–π—Ç–µ...')

    # Save record about user to database
    userid = message.from_user.id
    fullname = message.from_user.full_name
    date = datetime.datetime.now()
    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        cursor = conn.cursor()
        print("ZED service successfully connected to SQLite | ", fullname, ' | ', date)
        query3 = "INSERT INTO zedcoms ('userid', 'fullname', 'q', 'date') VALUES (?, ?, ?, ?);"
        variables = (userid, fullname, q, date)
        cursor.execute(query3, variables)
        conn.commit()
        print("Record inserted successfully into zedcoms table ", cursor.rowcount)
        print(userid, fullname, q, date)
        cursor.close()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/companies.db')
    df = pd.read_sql('SELECT * FROM companies WHERE CODE="{}" OR NAME LIKE "%{}%"'.format(q, q.upper()), conn)
    if len(df) == 0:
        await message.answer("üö´ –í —Ä–µ—î—Å—Ç—Ä—ñ —Å—É–±'—î–∫—Ç—ñ–≤ –ó–ï–î *–≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏* –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º!!!", parse_mode="Markdown")
    else:
        for index, row in df.iterrows():
            try:
                zed_name = row['NAME']
            except:
                zed_name = ''
            try:
                zed_edrpou = int(row['CODE'])
            except:
                zed_edrpou = ''
            try:
                zed_address = row['ADDRESS']
            except:
                zed_address = ''
            try:
                zed_code = row['ZED_CODE']
            except:
                zed_code = ''
            try:
                zed_reg_date = datetime.datetime.strptime(row['REG_DATE'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
            except:
                zed_reg_date = ''
            try:
                zed_stop = datetime.datetime.strptime(row['DEL_DATE'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
            except:
                zed_stop = ''
            await message.answer('*–ù–∞–∑–≤–∞:* {}\n*–Ñ–î–†–ü–û–£:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–û–±–ª—ñ–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä:* {}\n*–î–∞—Ç–∞ –æ–±–ª—ñ–∫—É:* {}\n*–ê–Ω—É–ª—å–æ–≤–∞–Ω–æ:* {}\n'.format(zed_name, str(zed_edrpou), zed_address, zed_code, zed_reg_date, zed_stop), parse_mode="Markdown")

    await msg.delete()
    await state.finish()


@dp.callback_query_handler(text_contains="broker")
async def broker_request(call: types.CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer("üóÉ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ú–ò–¢–ù–û–ì–û –ë–†–û–ö–ï–†–ê</b>")
    await call.message.answer('‚ö†Ô∏è–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–º –∫–æ–¥–æ–º –∞–±–æ –Ω–∞–∑–≤–æ—é')
    await call.message.answer('üë®‚Äçüíª –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ –Ω–∞–∑–≤—É –æ—Å–æ–±–∏:')
    await Broker.broker_state.set()

@dp.message_handler(state=Broker.broker_state)
async def broker_status(message: types.Message, state: FSMContext):
    q = message.text
    await state.update_data(q=message.text)
    doc = open('/home/agmorev/pentadabot_v2/data/waiting.mp4', 'rb')
    msg = await message.answer_animation(doc, caption='–ó–∞—á–µ–∫–∞–π—Ç–µ...')

    # Save record about user to database
    userid = message.from_user.id
    fullname = message.from_user.full_name
    date = datetime.datetime.now()
    try:
        conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/pentada.db')
        cursor = conn.cursor()
        print("BROKER service successfully connected to SQLite | ", fullname, ' | ', date)
        query3 = "INSERT INTO brokers ('userid', 'fullname', 'q', 'date') VALUES (?, ?, ?, ?);"
        variables = (userid, fullname, q, date)
        cursor.execute(query3, variables)
        conn.commit()
        print("Record inserted successfully into brokers table ", cursor.rowcount)
        print(userid, fullname, q, date)
        cursor.close()
    except sqlite3.Error as error:
        print("Failed to insert data into sqlite table", error)
    finally:
        if (conn):
            conn.close()
            print("The SQLite connection is closed")

    conn = sqlite3.connect('/home/agmorev/pentadabot_v2/data/brokers.db')
    df = pd.read_sql('SELECT * FROM brokers WHERE CODE="{}" OR NAME LIKE "%{}%"'.format(q, q.upper()), conn)

    if len(df) == 0:
        await message.answer("üö´ –í —Ä–µ—î—Å—Ç—Ä—ñ –º–∏—Ç–Ω–∏—Ö –±—Ä–æ–∫–µ—Ä—ñ–≤ *–≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏* –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º!!!", parse_mode="Markdown")
    else:
        for index, row in df.iterrows():
            try:
                broker_name = row['NAME']
            except:
                broker_name = ''
            try:
                broker_edrpou = row['CODE']
            except:
                broker_edrpou = ''
            try:
                broker_address = row['ADDRESS']
            except:
                broker_address = ''
            try:
                broker_code = row['NUMBER']
            except:
                broker_code = ''
            try:
                broker_reg_date = datetime.datetime.strptime(row['DATE'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
            except:
                broker_reg_date = ''
            try:
                broker_stop = row['NOTE']
            except:
                broker_stop = ''
            await message.answer('*–ù–∞–∑–≤–∞:* {}\n*–Ñ–î–†–ü–û–£:* {}\n*–ê–¥—Ä–µ—Å–∞:* {}\n*–°–µ—Ä—ñ—è, –Ω–æ–º–µ—Ä –¥–æ–∑–≤–æ–ª—É:* {}\n*–î–∞—Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É:* {}\n*–ü—Ä–∏–º—ñ—Ç–∫–∏:* {}\n'.format(broker_name, broker_edrpou, broker_address, broker_code, broker_reg_date, broker_stop), parse_mode="Markdown")
    await msg.delete()
    await state.finish()